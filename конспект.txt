ТИПЫ ДАННЫХ

Типы данных делятся на две группы: простые (они неизменяемы) типы и объекты (изменяеые). Для простых типов есть обертки, которые могут неявно вызываться для переменных и литералов
Простые:
 - number
 - string
 - boolean
 - null
 - undefined
Однако typeof для null выведет object. Undefined, а также Infinity и NaN, являются идентификаторами (синглтонами?)

 Объектные типы:
 - объекты {name: ivan}
 - массивы [1, 2, 3]
 - регулярки /w+/g
 - функции function(){}

 Однако typeof для function выведет function

 JS имеет динамическую типизацию, то есть объявив и инициалзировав переменную можно потом поменять тип ее значений, например, с number на string. В JS есть автоматическая конвертация типа, если парсер ожидает увидеть, например, boolean, то он будет приводить переменную к этому типу, независимо, от того что там сейчас есть.

 Тип number используется как для целых, так и для вещественных значений. Целые чилса можно записывать в 16-ричный системе, для этого необходимо в начале написать 0x, например, 0xf. Для записи вещественных используется . или его экспоненциальная запись. Например, .89 <=> 0.89 <=> 8.9e-1. 
 Полезные методы обертки Number:
 - toFixed(n) - n-количество значков после запятой. 
 - toExponential(n) - n- степень
 - toPecision(n) - n - количество значащих цифр
 Методы для литералов вызываются после пробела. Например, 2 .toFixed(2). Есть значения Infinity и NaN.

Строковый литерал записывается с помощью "" или ''. Это можно использвать для вывода кавычек, однако проще использовать экранирование с помощью \. В JS нет типа char, поэтому используется строка единичной длины. 
Полезные методы, свойства и последовательности:
- length 
- \n \t - переход на новую строку и табуляция
- charAt(x) <=>  string[x]
- substring(x) - подстрока с индекса x и до конца 
- substring(x1, x2) - подстрока с индекса x1 и до x2, не включая
- sclice(x) - аналогичен substring, но может принимать отрицательные значения, что означает идти с конца
- substr(x, n) - подстрока с индекса x из n символов
- indexOf(substr) - возвращает индекс первого вхождения в строку
- lastIndexOf(substr) - возвращает индекс последнего вхождения в строку
- replace(substr1, substr2) - заменить посдстроку substr1 подстрокой substr2
- split(delimiter) - разбиение строки на масив строк
- toUpperCase() и  toLowerCase()

К логическому значению может быть приведено любое значение. Есть список значений кроме литерала false, которые также приводятся к значению false. Это: undefined, null, 0, "", NaN

Значение undefined имеют:
- неинициализированные переменные
- обращение к несуществующему свойству объекта
- обращение к несущетсвующему элементу массива
- обращение к параметру функции, которому не было ничего передано. Например, sqrt(), так как не было передан параметр.
- если функция ничего не возвращает, то это значание будет undefined

_________________________________________________________________________________________________________________

ОБЪЯВЛЕНИЕ И РАБОТА С ПЕРЕМЕННЫМИ

var a = 5;
var b = c = "string";
var _d = 4, $f = "";

var obj = {name: "ivan"}
obj.name = "vasya"

var ar = [1, 2, 3]
ar[1] = 10
var _a 
isTrue && _a = 5 - присвоит значение переменной -а только, если isTrue = true
var _b = b || "Default string" - инициализирует переменную значением из b, если оно есть, или "Default string"

___________________________________________________________________________________________________________

ОПРЕАТОРЫ
- унарные (+, -, typeof, ++, --, !, delete)
- бинарные (+, -, /, *, %, <, >, <=, >=, ===, !==, &&, ||, instanceof) / - нецелочисленное
- тернарный ( ? :)

Есть бинарный оператор запятая (выражение1, выражение2). Вычисляется выражение1, потом выражение2, которое и возврщается
var a = (1, 2) <=> a = 2
_________________________________________________________________________________________________________________

ПРЕОБРАЗОВАНИЕ ТИПОВ

5 + "" => string
5 * "4" => number
!!4 => boolean
+"5" => number  +"" = 0  +"45 px" = NaN

2.toString(radix)
parseInt("45 px") parseInt("45 px", 10) => 45
parseFloat()
___________________________________________________________________________________________________________________

ЦИКЛЫ

var i;
for (i=10;i--;) {}

for (property in person) {
	
}
______________________________________________________________________________________________________________________

ФУНКЦИИ

functions name(argsList) { ... return ...}
var f = function(args) {}; - объявление с инициализацией переменной с помощью анонимной функции

Для получения значений всех аргументов, переданных функции есть массив arguments.
В JS функции являются объектами, поэтому их можно передавать в качестве аргументов, а также возвращать из других функций

var func = function(callback){
	var name = ivan
	return callback(name)
};

func(function(name){
	console.log("Hello "+ name)
})

Существует три метода для указания функции, свойство какого объекта свледует использовать. Это call, apply и bind

var greet = function(){
	return "My name is "+ this.name;
};
var person = {					var anotherPerson = {
	name: "Ivan",					name: "Bob",
	g: greet						g: greet
};								}
console.log(person.g())
console.log(person.g.call(anotherPerson))   <=> console.log(person.g.apply(anotherPerson))
var bound = greet.bind(person)
_______________________________________________________________________________________________________________________

ОБЪЕКТЫ
Объект - набор свойств, который представляет из себя пары имя-значение. Свойство можно добавлять "на лету". Если свойство определяется функцией, то он называется методом.
Для создания объектов можноиспользовать литерал (см. ниже), создать объект типа Object и "навесить" ему свойств, использовать статический метод Object.create(прототип_объекта)
Для удаления свойств объектов используется опереатор delete. Для проверки наличия свойства в объекте есть оператор in

var person = {
				name: "ivan",
				age: 33
			 }
person.name  или person["name"]
person.id = 156
delete person.id
"id" in person

Для обращение к внутренним свойствам объекта используется this.свойство.
Любое свойство объекта имеет 4 атрибута:
- value
- writable
- enumerable
- configurable
Их значения можно получить с помощью Object.getOwnPropertyDescriptor(person, "name")
Object.defineProperty(person, "gender", {
	value: "male",
	writable: false,
	enumerable: false,		влияет на цикл for in
	configurable: false		можно ли менять в дальнейшем атрибуты или удалять
})

Для предотвращения добавления новых свойств к объекту можно использовать Object.preventEctensions(person)
Object.seal(person) = Object.preventEctensions(person) + configurable:false
Object.freeze(person) = Object.sealed(person) + нельзя изменять свойства объекта
___________________________________________________________________________________________________________

КОНСТРУКТОРЫ
function User(name, id) {									class User{
	this.name = name;											constructor(name, id){
	this.id = id;													this.name = name;
	this.greeting = fuction() {										this.id = id;
		console.log("Hello, my name is " + this.name)			}          <-- без ;
	}															greeting(){
}																	console.log(`Hello, my name is ${this.name}`)
let ivan = new User("Ivan", 25);								}
															}
______________________________________________________________________________________________________________

КОНТЕКСТ ВЫЗОВА

Функция может обладать 4 различными контекстами:
 - При обыкновенном вызове функции, как function showThis(){console.log(this)}, контекст, он же this,
   соответствует window или undefined в ES6
 - Если функция является методом объекта, как let obj = {a: 5, showThis: ()=>console.log(this);}, то 
	this соответствует объекту.
	функция внутри функции теряет контекст, но не стрелочная!
 - если функция является конструктором (new), то this соответствует новому создаваемому объекту
 - можно заранее установить контекст для функции с помощью call(context, arg), apply(context, args[]) и bind(context)

 У стрлочной функции нет своего контекста вызова, она берет его у родителя.
______________________________________________________________________________________________________________
НАСЛЕДОВАНИЕ И ПРОТОТИПЫ

В JS есть только наследование прототипов с помощью статического метода Object.create(прототип_объекта)
Под классом в JS подразумевают множество всех объектов, которые наследуют все свойства от одного прототипа.
var Person = {
	constructor: function(name, age, gender) {
		this.name = name
		this.age = age
		this.gender = gender
		return this
	}
}
var Dev = Object.create(Person)
dev.constructor = function(name, age, gender, skills) {
	Person.constructor.apply(this, arguments)
	this.skills = skills || []
	return this
}

var p1 = new Person("Ivan", 33, "male")
var d1 = new Dev("Ivan", 33, "male", ["Java", "Scala"])

Поля и функции в главном класск можно не определять напрямую в конструктуре и прописывая явно, а "навешивать" на поле prototype.
Person.prototype.greet(name) = function () {
	console.log("Hello, my name is " + this.name)
}

Для получения прототипа объекта есть метод __proto__
Для переопределения метода надо написать

Person.prototype.toString = function() {
	return this.name
}
________________________________________________________________________________________________________________

МАССИВЫ
var array = [1, 2, 3, 4]
var array[array.length] = 5 - добавить еще 1 элемент в конец
array[20] = 20 -  добавит элемент. При этом длина массива считается, как индекс поледнего элемента +1, то есть станет 21!
У массивов есть конструктор
var arr = new Array(1 ,2, 3) - если передать один аргумент, то создастся массив с указанным числом элементов. Однако смысла нет, так  как все массивы динамические
var a = [,,,1] - пропускает первые 3 элемента и инициализирует только 4 элемент
В массивах индексы хранятся в виде строк, то есть массив в действительности это Map[String, Object]. Однако индексы это неотрицательные целые числа
array["hello"] = 5 - добавит свойство масиву
array.length = 3 - удалит все элементы с индексом больше 2
delete array[0] - удаляет значение под индексом 0, но элемент не удаляется и длина не изменяется

Методы
Array.isArray(array) - проверит, является array массивом
array.join() или array.join("...") - для объединения в строку всх элементов массива
array.indexOf(x) и array.lastIndexOf(x) - вернут индекс элемента
array.reverse() - обратный массив, изменяет исходный
array.sort() или array.sort(fuction(a,b){}) - для сортировки массива
array.slice(x) - аналогичен методу для строк. Не изменяет исходный массив
array.splice(x, y, a0, a1, a3) - удалит y элемент, начиная с x, а потом вставит туда a0, a1, a2
array.push(x) - добавит элемент в конец 
array.unshift(x) - добавит элемент в начало массива
array.pop() - удаляет последний элемент и его возвращает
array.shift() - удаляет первый элемент и его возвращает

var arr = ["String1", "String2", "String3", "Hello"]
arr.forEach(function(el, ind, arr){
	arr[ind] = el.toUpperCase();
});
arr.map(function(e){return e.toUpperCase()});
arr.filter(function(e){return e.indexOf('o')===-1})
arr.every(function(e){return e.length>4}) - все ли элементы удовлетворяют данному условию
arr.some(function(e){}) - есть ли хоть один элемент, для которого ...

var numbers = [1, 2, 3, 4]
numbers.reduce(function(a, b, index, array){}) - необязательно писать все аргументы. a - промежуточное значение, b - текущий элемент
numbers.reduce(function(a, b){return a + b})
numbers.reduceRight(...) - проходит справа налево массив
________________________________________________________________________________________________________________

СЕРИАЛИЗАЦИЯ И JSON

Сериализация - преобразование объектов в строки
var user = {id: 2312, age:23}
jsonUser = Json.stringify(user) - перевод в строку
initial = Json.parse(jsonUser) - перевод в объект
Метод stringify() ищет у объекта метод toJSON, который и используется.
_________________________________________________________________________

КЛАСС Date
var date = new Date() - текущая дата
date = new Date(2019,0,1,0,0,0) // (Y, M, D, H, M, S, MS) полночь 1ого Января
date.getHours(), date.getSeconds(), getYear() и  getFullYear()
date.setHours(), date.setSeconds(), setYear() и  setFullYear()

date.getTime() - вернет мс с 01,01,1970

date.getUTCHours() - вернет локальное время

date.toTimeString() - вывод только времени
date.toDateString() - вывод только даты
Date.now() - вернет текущее время в мс

______________________________________________________________________________________________________________________________

РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ
https://www.youtube.com/watch?v=9hLkbhRs7jM&t=545s
\d - все цифры      \D - все кроме цифр     \w - цифры+буквы        \W - не цифры и не буквы        \s - пустые символы(пробелы, табы, перееносы строк)     
\b - граница слова, например, \ban\b - найдет все артикли a
| - логическое или \bme\b|\band|b  - найти слова me или and, gr(a|e)y - найти слова gray и grey, cent(er|re) - center/centre
colou?r - color/colour
\. - найти точку, а просто . найдет все символы, кроме переноса строк
a...y <=> a.{3}y - найдет сочетание из 5 символов, начинающихся на a и заканчивающихся на e
a.{2,6}y - длина предыдущего сочетания от 4 до 8

var pattern = new RegEx("\w+", "gim"); - первый аргумент регулярка, второй флаги: g - global(все вхождения, иначе первое), i - ignore case, m - multiline
var samePattern = /\w+/gim;
var string = "Something to practice"
string.match(pattern) => [Something,to,practice]
string.search(pattern) => 0
__________________________________________________________________________

РАБОТА В БРАУЗЕРЕ

Окна и вывод
alert("") // confirm("") // promt("")
document.write("") - вывод текста на страницу

Выбор элемента на странице
let box = document.getElementById("box"),                	- получить один элемент по уникалному id
	btn = document.getElementsByTagName("button"),			- получить псевдомассив по тегу
	circle = document.getElementsByClassName("circle"),		- получить псевдомассив по имени класса
	heart = document.querySelectorAll(".heart"),			- получить псевдомассив по запросу, указав имя класса (после точки), тег, id ...
	singleHeart = document.querySelector(".heart");			- получит первый элемент на странице по запросу

Создание элемента
let div = document.createElement("div"),                    - создаст пару тегов div
    text = document.createTextNode("Some text");            - создаст объект с текстом

Работа со стилями
box.style.backgroundColor = "green";                        - изменить свойство стиля
btn[1].style.borderRadius = "100%";                         - изменить свойство стиля
div.classList.add("black");                                 - добавить стиль к элементу
div.classList.remove("...");								- удали стиль
box.style.display = "none"									- спрятать элемент

Работа с элементами на странице
document.body.appendChild(div);                             - добавить элемент в конец элемента (тут body)
document.body.insertBefore(что, перед чем)                  - добавить элемент перед другим внутри тега body
document.body.removeChild(что)                              - удалить элемент из родительского тега (тут body)
document.body,replaceChild(new, old)                        - заменить элемент
div.innerHTML = "<h1>Hello World!</h1>"                     - вставка HTML-верстки внутрь тега. 
div.textContent = "<h1>Hello World!</h1>"                   - вставка HTML-верстки внутрь тега. 
input.value = ...											- вставка значения в поле input

Работа с событиями
<button onclick = "Text')">									- можно вставить обработчик прямо в тег
btn.onclick = (event) => alert("...");						- назначает обработчик на объект (тут кнопка). Потом удалить обработчик не получиться
btn.addEventListener('click', (e)=> alert("")) 				- кошерный способ назначения обработчика событий, который потом можно удалить. 
															  Также все последующие обработчики будут выполняться, а не затирать предыдущий. 
btn.removeEventListener('click', listener)					- удалить обработчик событий данного типа. Чтобы это сработало ссылка listener 
															  в add и remove должна быть одной и той же, т.е. анонимные обработчики не подойдут
event можно не указывать в ф. 
event имеет следущие полезные свойства:
- target				- элемент верстки, где произошло событие, у которого потом можно определить по tagName
- type  				- тип события
- screenX, screenY		- координаты на экране, где произошло событие

event.target.tagName == "BUTTON";
event.target.classList.contains('class')
event.target.matches('button.first') <div button class="first">
Если элемент, где произошло событие, вложенный, то данное событие может отработать еще и для контейнера, если там есть соответствующий EventListener

event.preventDefault() - блокирует команды по умолчанию в браузере, как переход по гиперссылке, отправку данных на бек и тп.
heart.forEach((elem)=>elem.addEventListener("click", (event)=>...)) - назначение обработчика событи для всех элементов в псевдомассиве

Список событий:
- click									- работает как для кнопок, так и для checkbox
- onmouseenter / onmouseleave
- input 								- отслеживает ввод текста в окно ввода

_________________________________________________________________________

РАБОТА СО ВРЕМЕНЕМ
setTimeout(func, delay)									- запускает выполнение ф. func после завдержки delay мс
let timerId = setTimeout(()=>alert("Hello"), 3000);		- ф. выполнится
clearTimeout(timerId)									- останавливает действие setTimeout и setInterval
setInterval(func, delay)								- запускает выполнение ф. func каждые delay мс

let timerId = setTimeout(function log() {				- рекурсивный вызов для эмуляции setInterval
	console.log(...);									  позволяет решить проблему, если функция внутри 
	setTimeout(log, 2000)								  отработывае дольше, чем задержка
})

_________________________________________________________________________

РАБОТА С window, document и элементами

window.addEventListener("DOMContentLoaded",() =>{		- ждем, когда загрузится DOM-дерево и начинаем работать
	код
})

document.documentElement.clientWidth 					- ширина отражаемой страницы
document.documentElement.clientHeight 					- высота отражаемой страницы
document.documentElement.scrollTop	 					- количество промотанных вниз пикселей. Это свойство можно менять

scrollBy(dx, dy)										- сдвиг на dx, dy
scrollTo(x, y)											- перемещение в x, y


___________________________________________________________________________________________________________

AJAX. GET и PUT запросы

let request = new XMLHttpRequest();

request.open(method, url, async = true, login="", password ="");
request.open("GET", "js/current.json")
request.open("POST", "server.php");

request.setRequestHeader("Content-type", "application/json; charset = utf-8") - для json
request.setRequestHeader("Content-type", "application/x-www-form-urlencoded") - для ForData Map

request.send(body);
request.send(); - для GET-запроса

request.addEventListener("readystatechange", ()=>{
    if (request.readyState === 4 && request.status === 200) {
		let data = JSON.parse(request.response);
	}
});



___________________________________________________________________________________________________________

РАБОТА С NodeJS

require(filepath)  - для импорта модуля в файл. Например, require('./array') - импортирует файл array.js
require('events')  - импортирует встроенный модуль обработчика событий

module.export.someName = именнованная_функция(переменная) - прописывается в файле, где объявлены. Например, var f = (i)=> i+1; module.export.inc = f;
var c = require(filepath) - для работы с импортированными ф. Например, с.inc(1) = 2

можно сократить до
module.export.inc = (i) => i++;       или module.export = {inc : f, value: 5}

var eventModule = require("events"); 					- импорт модуля событий
var handler = new eventModule.EventEmitter(); - создание объекта обработчика
handler.on("some_event", (arg)=>{})						- обработка собятия
handler.emit("some_event", arg)								- генерация события

var util = require("util"); 												- импорт модуля утилит
util.inherits(className, eventModule.EventEmiiter)	- все объекты класса className унаследуют методы EventEmiiter

var fs = require("fs"); 											- импорт мол для работы с файловой системой
fs.readFileSync(filename, кодировка)					- блокирующее выполнение остальной программы чтение файла. 
																								Не блокирующее - readFile(filename,кодировка, callback(err, data)=>{})
fs.writeFileSync(filename, variable)									- блокирующая выполнение остальной программы запись файла. Если файла нет, то он создастся
fs.unlink(filename, callback())												- удаление файла
fs.mkdir(dirname, callback())													- создание папки
fs.rmdir(dirname, callback())													- удаление пустой папки
var rStream = fs.createReadStream(filename, "ut8")		- для асинхронного чтения из файла уже с обработчиком событий
stream.on("data", (chunk)=>{})
var wStream = fs.createWrireStream(filename);
wStream.write(chunk);
rStream.pipe(wStream)																	- асинхронно передает данные из rStream в wStream



var http = require("http"); 									- импорт модуля для создания сервера
var server= http.createServer((request, response)=>{
	if (request.url === "")
	response.writeHead(200, {"Content-Type": "text/plain"; charset=utf-8}); 	- можно "text/html" или "application/json"
	response.end("Some Text"); // rStream.pipe(response)
});
server.listen("3000","127.0.0.1");


var express = require("express");
var http = express();

http.get("/", (req, res)=> {res.send("Text")});
http.get("/", (req, res)=> {res.sendFile(filename)});
http.get("/.../:id", (req, res)=> {res.send("ID is "+req.pqrams.id)});
http.get("/...?a=5&b=1", (req, res)=> {res.send("Params are "+req.query)});
http.post("/", (req, res)=> {});

http.listen("3000");
https://www.npmjs.com/package/body-parser		- распарсить post запрос
https://www.npmjs.com/package/nodemailer		- отправка данных на почту

sudo nginx -t
npm init - для создания пакета с зависимостями
npm install express -save   		- в папке с проектом
___________________________________________________________________________________________________________

PROMISES
let promise = new Promise(function(resolve, reject))				- resolve и reject - callback functions
promise.then(callback)																			- callback вызывается, если успешно выполнился 
			 .catch(callback)																			-	callback вызывается в случае провала
			 .then(callback)																			- этот callback будет вызываться всегда

___________________________________________________________________________________________________________

LOCAL STORAGE
localStorage.setItem(key, value)									- запись в local storage, например, ("a", 1). Если ключ уже есть, то значение просто перезапишется
localStorage.getItem(key)													- получить из local storage
localStorage.removeItem(key)											- удалить из local storage
localStorage.clear()															- полная очистка localStorage
___________________________________________________________________________________________________________

try-catch

try{
	...
}catch(error) {
	...
} finally{
	...
}
error.name 						- имя ошибки
error.message					- сообщение ошибки
error.stack						- положение ошибки
throe new Error(message) 			- возбудить собственную ошибку